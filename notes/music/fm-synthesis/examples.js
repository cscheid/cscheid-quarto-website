import * as fm from "./fm.js";
function simpleSine(freq = 440) {
  const carrier = fm.sineWave(freq);
  const envelope = fm.envelope(1, 0.01, 0.1, 0.8, 0.1);
  const wave = fm.modulateAmp(carrier, envelope);
  return fm.generate(wave, 1);
}
function variableSine(startFreq, endFreq, duration) {
  const carrier = fm.oscillator();
  const result = new Float32Array(duration * fm.sampleRate);
  for (let i = 0; i < result.length; i++) {
    const t = i / fm.sampleRate;
    const freq = startFreq + (endFreq - startFreq) * t / duration;
    result[i] = carrier(freq);
  }
  return result;
}
function badVariableSine(startFreq, endFreq, duration) {
  const result = new Float32Array(duration * fm.sampleRate);
  for (let i = 0; i < result.length; i++) {
    const t = i / fm.sampleRate;
    const freq = startFreq + (endFreq - startFreq) * t / duration;
    result[i] = fm.sineWave(freq)(t);
  }
  return result;
}
function fm1(baseFreq, modFreq, modAmp) {
  const carrier = fm.sineWave(baseFreq);
  const modulator = fm.modulateAmp(fm.sineWave(baseFreq * modFreq), (_) => modAmp);
  const envelope = fm.envelope(1, 0.01, 0.1, 0.8, 0.1);
  const wave = fm.modulateAmp(fm.modulateFreq(carrier, modulator), envelope);
  return fm.generate(wave, 1);
}
export {
  badVariableSine,
  fm1,
  simpleSine,
  variableSine
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiZXhhbXBsZXMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCAqIGFzIGZtIGZyb20gXCIuL2ZtLnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGVTaW5lKGZyZXEgPSA0NDApIHtcbiAgICBjb25zdCBjYXJyaWVyID0gZm0uc2luZVdhdmUoZnJlcSk7XG4gICAgY29uc3QgZW52ZWxvcGUgPSBmbS5lbnZlbG9wZSgxLCAwLjAxLCAwLjEsIDAuOCwgMC4xKTtcbiAgICBjb25zdCB3YXZlID0gZm0ubW9kdWxhdGVBbXAoY2FycmllciwgZW52ZWxvcGUpO1xuICAgIHJldHVybiBmbS5nZW5lcmF0ZSh3YXZlLCAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhcmlhYmxlU2luZShzdGFydEZyZXE6IG51bWJlciwgZW5kRnJlcTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyKVxue1xuICAgIGNvbnN0IGNhcnJpZXIgPSBmbS5vc2NpbGxhdG9yKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheShkdXJhdGlvbiAqIGZtLnNhbXBsZVJhdGUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHQgPSBpIC8gZm0uc2FtcGxlUmF0ZTtcbiAgICAgICAgY29uc3QgZnJlcSA9IHN0YXJ0RnJlcSArIChlbmRGcmVxIC0gc3RhcnRGcmVxKSAqIHQgLyBkdXJhdGlvbjtcbiAgICAgICAgcmVzdWx0W2ldID0gY2FycmllcihmcmVxKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBiYWRWYXJpYWJsZVNpbmUoc3RhcnRGcmVxOiBudW1iZXIsIGVuZEZyZXE6IG51bWJlciwgZHVyYXRpb246IG51bWJlcilcbntcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KGR1cmF0aW9uICogZm0uc2FtcGxlUmF0ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdCA9IGkgLyBmbS5zYW1wbGVSYXRlO1xuICAgICAgICBjb25zdCBmcmVxID0gc3RhcnRGcmVxICsgKGVuZEZyZXEgLSBzdGFydEZyZXEpICogdCAvIGR1cmF0aW9uO1xuICAgICAgICByZXN1bHRbaV0gPSBmbS5zaW5lV2F2ZShmcmVxKSh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZtMShcbiAgICBiYXNlRnJlcTogbnVtYmVyLFxuICAgIG1vZEZyZXE6IG51bWJlcixcbiAgICBtb2RBbXA6IG51bWJlcixcbikge1xuICAgIGNvbnN0IGNhcnJpZXIgPSBmbS5zaW5lV2F2ZShiYXNlRnJlcSk7XG4gICAgY29uc3QgbW9kdWxhdG9yID0gZm0ubW9kdWxhdGVBbXAoZm0uc2luZVdhdmUoYmFzZUZyZXEgKiBtb2RGcmVxKSwgXyA9PiBtb2RBbXApO1xuICAgIGNvbnN0IGVudmVsb3BlID0gZm0uZW52ZWxvcGUoMSwgMC4wMSwgMC4xLCAwLjgsIDAuMSk7XG4gICAgY29uc3Qgd2F2ZSA9IGZtLm1vZHVsYXRlQW1wKGZtLm1vZHVsYXRlRnJlcShjYXJyaWVyLCBtb2R1bGF0b3IpLCBlbnZlbG9wZSk7XG4gICAgcmV0dXJuIGZtLmdlbmVyYXRlKHdhdmUsIDEpO1xufVxuXG4vLyAvKiBBdHRlbXB0aW5nIHRvIHJlcHJvZHVjZSBzb21lIHRvbmVzIGZyb20gXG4vLyBodHRwczovL3dlYi5lZWNzLnVtaWNoLmVkdS9+ZmVzc2xlci9jb3Vyc2UvMTAwL21pc2MvY2hvd25pbmctNzMtdHNvLnBkZiAqL1xuXG4vLyBleHBvcnQgZnVuY3Rpb24gaGF0KGxlZnQ6IG51bWJlciwgY2VudGVyOiBudW1iZXIsIHJpZ2h0OiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCB0OiBudW1iZXIpIHtcbi8vICAgICBpZiAodCA8IGxlZnQpIHtcbi8vICAgICAgICAgcmV0dXJuIDA7XG4vLyAgICAgfSBlbHNlIGlmICh0IDwgY2VudGVyKSB7XG4vLyAgICAgICAgIHJldHVybiBoZWlnaHQgKiAodCAtIGxlZnQpIC8gKGNlbnRlciAtIGxlZnQpO1xuLy8gICAgIH0gZWxzZSBpZiAodCA8IHJpZ2h0KSB7XG4vLyAgICAgICAgIHJldHVybiBoZWlnaHQgKiAocmlnaHQgLSB0KSAvIChyaWdodCAtIGNlbnRlcik7XG4vLyAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgcmV0dXJuIDA7XG4vLyAgICAgfVxuLy8gfVxuXG4vLyBleHBvcnQgZnVuY3Rpb24gYnJhc3MoKSB7XG4vLyAgICAgLy8gSXQncyBlYXNpZXIgdG8gY3JlYXRlIEZpZy4xMSdzIGVudmVsb3BlIHdpdGggaGF0IGZ1bmN0aW9uc1xuLy8gICAgIGNvbnN0IGVudmVsb3BlID0gKHQ6IG51bWJlcikgPT4ge1xuLy8gICAgICAgICByZXR1cm4gKFxuLy8gICAgICAgICAgICAgaGF0KDAsIDEvNiwgMi82LCAxLCB0KSArXG4vLyAgICAgICAgICAgICBoYXQoMS82LCAyLzYsIDUvNiwgMC43NSwgdCkgK1xuLy8gICAgICAgICAgICAgaGF0KDIvNiwgNS82LCAxLCAwLjYsIHQpKTtcbi8vICAgICB9XG4vLyAgICAgY29uc3QgZHVyYXRpb24gPSAwLjY7XG5cbi8vICAgICBjb25zdCBwMyA9IC42O1xuLy8gICAgIGNvbnN0IHA1ID0gNDQwO1xuLy8gICAgIGNvbnN0IHA2ID0gNDQwO1xuLy8gICAgIGNvbnN0IHA3ID0gMDtcbi8vICAgICBjb25zdCBwOCA9IDU7XG5cbi8vICAgICAvLyBub3cgd2UgYXR0ZW1wdCB0byBmb2xsb3cgZmlnIDEwXG4vLyAgICAgY29uc3QgZGV2MSA9IHA3ICogcDY7IC8vIDBcbi8vICAgICBjb25zdCBkZXYyID0gKHA4IC0gcDcpICogcDY7XG4vLyAgICAgcmV0dXJuIGZtLmdlbmVyYXRlKHQgPT4ge1xuLy8gICAgICAgICBjb25zdCB1ZzUgPSBlbnZlbG9wZSh0KSAqIGRldjI7XG4vLyAgICAgICAgIGNvbnN0IHVnMSA9IGZtLm1vZHVsYXRlRnJlcVxuLy8gICAgIH0sIGR1cmF0aW9uKVxuLy8gfSJdLAogICJtYXBwaW5ncyI6ICJBQUFBLFlBQVksUUFBUTtBQUViLFNBQVMsV0FBVyxPQUFPLEtBQUs7QUFDbkMsUUFBTSxVQUFVLEdBQUcsU0FBUyxJQUFJO0FBQ2hDLFFBQU0sV0FBVyxHQUFHLFNBQVMsR0FBRyxNQUFNLEtBQUssS0FBSyxHQUFHO0FBQ25ELFFBQU0sT0FBTyxHQUFHLFlBQVksU0FBUyxRQUFRO0FBQzdDLFNBQU8sR0FBRyxTQUFTLE1BQU0sQ0FBQztBQUM5QjtBQUVPLFNBQVMsYUFBYSxXQUFtQixTQUFpQixVQUNqRTtBQUNJLFFBQU0sVUFBVSxHQUFHLFdBQVc7QUFDOUIsUUFBTSxTQUFTLElBQUksYUFBYSxXQUFXLEdBQUcsVUFBVTtBQUN4RCxXQUFTLElBQUksR0FBRyxJQUFJLE9BQU8sUUFBUSxLQUFLO0FBQ3BDLFVBQU0sSUFBSSxJQUFJLEdBQUc7QUFDakIsVUFBTSxPQUFPLGFBQWEsVUFBVSxhQUFhLElBQUk7QUFDckQsV0FBTyxDQUFDLElBQUksUUFBUSxJQUFJO0FBQUEsRUFDNUI7QUFDQSxTQUFPO0FBQ1g7QUFDTyxTQUFTLGdCQUFnQixXQUFtQixTQUFpQixVQUNwRTtBQUNJLFFBQU0sU0FBUyxJQUFJLGFBQWEsV0FBVyxHQUFHLFVBQVU7QUFDeEQsV0FBUyxJQUFJLEdBQUcsSUFBSSxPQUFPLFFBQVEsS0FBSztBQUNwQyxVQUFNLElBQUksSUFBSSxHQUFHO0FBQ2pCLFVBQU0sT0FBTyxhQUFhLFVBQVUsYUFBYSxJQUFJO0FBQ3JELFdBQU8sQ0FBQyxJQUFJLEdBQUcsU0FBUyxJQUFJLEVBQUUsQ0FBQztBQUFBLEVBQ25DO0FBQ0EsU0FBTztBQUNYO0FBRU8sU0FBUyxJQUNaLFVBQ0EsU0FDQSxRQUNGO0FBQ0UsUUFBTSxVQUFVLEdBQUcsU0FBUyxRQUFRO0FBQ3BDLFFBQU0sWUFBWSxHQUFHLFlBQVksR0FBRyxTQUFTLFdBQVcsT0FBTyxHQUFHLE9BQUssTUFBTTtBQUM3RSxRQUFNLFdBQVcsR0FBRyxTQUFTLEdBQUcsTUFBTSxLQUFLLEtBQUssR0FBRztBQUNuRCxRQUFNLE9BQU8sR0FBRyxZQUFZLEdBQUcsYUFBYSxTQUFTLFNBQVMsR0FBRyxRQUFRO0FBQ3pFLFNBQU8sR0FBRyxTQUFTLE1BQU0sQ0FBQztBQUM5QjsiLAogICJuYW1lcyI6IFtdCn0K
